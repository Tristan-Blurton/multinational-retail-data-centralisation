Format datatypes for orders table:
----------------------------------
ALTER TABLE orders_table
	ALTER COLUMN date_uuid TYPE UUID USING date_uuid::UUID,
	ALTER COLUMN user_uuid TYPE UUID USING user_uuid::UUID,
	ALTER COLUMN card_number TYPE VARCHAR(19),
	ALTER COLUMN store_code TYPE VARCHAR(12),
	ALTER COLUMN product_code TYPE VARCHAR(11),
	ALTER COLUMN product_quantity TYPE SMALLINT;

Format datatypes for users table:
----------------------------------
ALTER TABLE dim_users
	ALTER COLUMN first_name TYPE VARCHAR(255),
	ALTER COLUMN last_name TYPE VARCHAR(255),
	ALTER COLUMN date_of_birth TYPE DATE,
	ALTER COLUMN country_code TYPE VARCHAR(2),
	ALTER COLUMN user_uuid TYPE UUID using user_uuid::UUID,
	ALTER COLUMN join_date TYPE DATE;

Format datatypes for stores table:
----------------------------------
ALTER TABLE dim_store_details
	ALTER COLUMN longitude TYPE FLOAT,
	ALTER COLUMN latitude TYPE FLOAT,
	ALTER COLUMN store_code TYPE VARCHAR(12),
	ALTER COLUMN store_type TYPE VARCHAR(255),
	ALTER COLUMN country_code TYPE VARCHAR(2),
	ALTER COLUMN continent TYPE VARCHAR(255);

Remove pound sign from price column:
------------------------------------
UPDATE dim_products
SET product_price = (SELECT TRIM('Â£' FROM product_price));

Create weight class column:
---------------------------
ALTER TABLE dim_products
ADD COLUMN weight_class VARCHAR(14);

UPDATE dim_products
SET weight_class = (CASE
				   		WHEN weight < 2 
							THEN 'Light'
						WHEN weight >= 2 AND weight < 40 
							THEN 'Mid_Sized'
						WHEN weight >= 40 AND weight < 140
							THEN 'Heavy'
						WHEN weight >= 140 
							THEN 'Truck_Required'
						END);

Add notnull constraint to new weight class column:
--------------------------------------------------
ALTER TABLE dim_products
ALTER COLUMN weight_class SET NOT NULL;

Rename removed column and convert to type boolean:
ALTER TABLE dim_products
RENAME COLUMN removed TO still_available;

UPDATE dim_products
SET still_available = (CASE WHEN still_available = 'Still_available'
			    THEN 1
			    ELSE 0
			    END);

Format datatypes for products table:
------------------------------------
ALTER TABLE dim_products
	ALTER COLUMN product_price TYPE FLOAT USING product_price::double precision,
	ALTER COLUMN weight TYPE FLOAT,
	ALTER COLUMN "EAN" TYPE VARCHAR(17),
	ALTER COLUMN product_code TYPE VARCHAR(11),
	ALTER COLUMN date_added TYPE DATE,
	ALTER COLUMN uuid TYPE UUID USING uuid::UUID,
	ALTER COLUMN still_available TYPE BOOL USING still_available::boolean;

Format datatypes for datetimes table:
----------------------------------
ALTER TABLE dim_datetimes
	ALTER COLUMN datetime TYPE DATE,
	ALTER COLUMN time_period TYPE VARCHAR(10),
	ALTER COLUMN date_uuid TYPE UUID USING date_uuid::UUID;
	
Format datatypes for card details table:
----------------------------------------
ALTER TABLE dim_card_details
	ALTER COLUMN card_number TYPE VARCHAR(19),
	ALTER COLUMN expiry_date TYPE DATE,
	ALTER COLUMN date_payment_confirmed TYPE DATE;

Add primary key constraints to branch tables:
---------------------------------------------
ALTER TABLE dim_card_details
ADD CONSTRAINT pk_card_details
PRIMARY KEY (card_number);

ALTER TABLE dim_datetimes
ADD CONSTRAINT pk_datetimes
PRIMARY KEY (date_uuid);

ALTER TABLE dim_products
ADD CONSTRAINT pk_products
PRIMARY KEY (product_code);

ALTER TABLE dim_store_details
ADD CONSTRAINT pk_stores
PRIMARY KEY (store_code);

ALTER TABLE dim_users
ADD CONSTRAINT pk_users
PRIMARY KEY (user_uuid);

Add foreign key constraints to core table:
------------------------------------------
ALTER TABLE orders_table
ADD CONSTRAINT fk_card_details
	FOREIGN KEY (card_number)
	REFERENCES dim_card_details(card_number),
ADD CONSTRAINT fk_datetimes
	FOREIGN KEY (date_uuid)
	REFERENCES dim_datetimes(date_uuid),
ADD CONSTRAINT fk_products
	FOREIGN KEY (product_code)
	REFERENCES dim_products(product_code),
ADD CONSTRAINT fk_stores
	FOREIGN KEY (store_code)
	REFERENCES dim_store_details(store_code),
ADD CONSTRAINT fk_users
	FOREIGN KEY (user_uuid)
	REFERENCES dim_users(user_uuid);